<chapter id="lexical">
    <title>Lexical structure</title>
    
    <para>Every Ceylon source file is a sequence of Unicode characters. Lexical
    analysis of the character stream, according to the grammar specified in this
    chapter, results in a stream of tokens. These tokens form the input of the 
    parser grammar defined in the later chapters of this specification. The
    Ceylon lexer is able to completely tokenize a character stream in a single 
    pass.</para> 
    
    <para>The lexer distinguishes Unicode uppercase letter, lowercase letter, 
    and numeric characters as defined by the Unicode standard. A 
    <literal>LowercaseLetter</literal> is any character whose 
    <literal>General_Category</literal> is <literal>Lowercase_Letter</literal>. 
    An <literal>UppercaseLetter</literal> is any character whose 
    <literal>General_Category</literal> is <literal>Uppercase_Letter</literal>, 
    <literal>Titlecase_Letter</literal>, or <literal>Other_Letter</literal>. A 
    <literal>Number</literal> is any character whose 
    <literal>General_Category</literal> is <literal>Decimal_Number</literal>, 
    <literal>Letter_Number</literal>, or <literal>Other_Number</literal>.</para>
            
    <comment><para>TODO: what is the character encoding? Does it work just like
    <literal>javac</literal>? Should we allow it to be declared by the source 
    file itself?</para></comment>
        
    <section id="whitespace">
        <title>Whitespace</title>
        
        <para>Whitespace characters are the ASCII <literal>SP</literal>, 
        <literal>HT</literal>, <literal>FF</literal>, <literal>LF</literal> and 
        <literal>CR</literal> characters.</para>
        
        <programlisting>Whitespace: " " | Tab | Formfeed | Newline | Return</programlisting>
        
        <para>Outside of a comment, string literal, or single quoted literal,
        whitespace acts as a token separator and is immediately discarded by
        the lexer. Whitespace is not used as a statement separator.</para>
        
    </section>
    
    <section id="comments">
        <title>Comments</title>
        
        <para>There are two kinds of comments:</para>
        
        <itemizedlist>
            <listitem>
                <para>a multiline comment that begins with <literal>/*</literal> 
                and extends until <literal>*/</literal>, and</para>
            </listitem>
            <listitem>
                <para>an end-of-line comment begins with <literal>//</literal> 
                or <literal>#!</literal> and extends until a line terminator: 
                an ASCII <literal>LF</literal>, <literal>CR</literal> or 
                <literal>CR LF</literal>.</para>
            </listitem>
        </itemizedlist>
        
        <para>Both kinds of comments can be nested.</para>
        
        <programlisting>LineComment: ("//"|"#!") ~(Newline|Return)* (Return Newline | Return | Newline)?</programlisting>
        
        <programlisting>MultilineComment: "/*" (MultilineCommmentCharacter | MultilineComment)* "*/"</programlisting>
        
        <programlisting>MultilineCommmentCharacter: ~("/"|"*") | ("/" ~"*") => "/" | ("*" ~"/") => "*"</programlisting>
        
        <para>The following examples are legal comments:</para>
        
        <programlisting>//this comment stops at the end of the line</programlisting>
        
        <programlisting>/*
   but this is a comment that spans
   multiple lines
*/</programlisting>
  
        <programlisting>#!/usr/bin/ceylon</programlisting>
        
        <para>Comments are treated as whitespace by both the compiler and documentation
        compiler. Comments may act as token separators, but their content is immediately 
        discarded by the lexer and they are not visible to the parser.</para>
  
    </section>
    
    <section id="identifiersandkeywords">
        <title>Identifiers and keywords</title>
        
        <para>Identifiers may contain upper and lowercase letters, digits and 
        underscores.</para>
        
        <programlisting>LowercaseChar: LowercaseLetter | "_"</programlisting>
        <programlisting>UppercaseChar: UppercaseLetter</programlisting>
        <programlisting>IdentifierChar: LowercaseChar | UppercaseChar | Number</programlisting>
        
        <para>All identifiers are case sensitive: <literal>Person</literal> and
        <literal>person</literal> are two different legal identifiers.</para>
        
        <para>The Ceylon lexer distinguishes identifiers which begin with an initial 
        uppercase character from identifiers which begin with an initial lowercase
        character or underscore. Additionally, an identifier may be qualified using 
        the prefix <literal>\i</literal> or <literal>\I</literal> to disambiguate it 
        from a reserved word or to explicitly specify whether it should be considered
        an uppercase or lowercase identifier.</para>
        
        <programlisting>LIdentifier: LowercaseChar IdentifierChar* | "\i" IdentifierChar+</programlisting>
        <programlisting>UIdentifier: UppercaseChar IdentifierChar* | "\I" IdentifierChar+</programlisting>

        <para>The following examples are legal identifiers:</para>
        
        <programlisting>Person</programlisting>
        <programlisting>name</programlisting>
        <programlisting>personName</programlisting>
        <programlisting>_id</programlisting>
        <programlisting>x2</programlisting>
        <programlisting>\I_id</programlisting>
        <programlisting>\Iobject</programlisting>
        <programlisting>\iObject</programlisting>
        <programlisting>\iclass</programlisting>

        <para>The prefix <literal>\I</literal> or <literal>\i</literal> is not 
        considered part of the identifier name. Therefore, <literal>\iperson</literal>
        is just a lowercase identifier named <literal>person</literal> and
        <literal>\Iperson</literal> is an <emphasis>uppercase</emphasis> identifier 
        named <literal>person</literal>.</para>
                        
        <para>The following reserved words are not legal identifier names unless they 
        appear escaped using <literal>\i</literal> or <literal>\I</literal>:</para>
        
        <para><literal>
        module package import
        alias class interface object given value assign void function
        of extends satisfies adapts abstracts
        in out
        return break continue throw
        assert
        if else switch case for while try catch finally then
        this outer super
        is exists nonempty
        </literal></para>
        
    </section>
    
    <section id="literals">
        <title>Literals</title>
        
    <section id="numericliterals">
        <title>Numeric literals</title>
        
        <para>An integer literal may be expressed in decimal, hexadecimal, or binary 
        notation:</para>
        
        <programlisting>IntegerLiteral: DecimalLiteral | HexLiteral | BinLiteral</programlisting>
        
        <para>A decimal literal has this form:</para>
        
        <programlisting>DecimalLiteral: Digits Magnitude?</programlisting>
        
        <para>Hexadecimal literals are prefixed by <literal>#</literal>:</para>
        
        <programlisting>HexLiteral: "#" HexDigits</programlisting>
        
        <para>Binary literals are prefixed by <literal>$</literal>:</para>
        
        <programlisting>BinLiteral: "$" BinDigits</programlisting>
        
        <para>A floating point literal has this form:</para>
        
        <programlisting>FloatLiteral: Digits ("." FractionalDigits (Exponent | Magnitude | FractionalMagnitude)? | FractionalMagnitude)</programlisting>
        
        <para>Decimal digits may be separated into groups of three using an underscore.</para>
        
        <programlisting>Digits: Digit+ | Digit{1..3} ("_" Digit{3})+</programlisting>
        <programlisting>FractionalDigits: Digit+ | (Digit{3} "_")+ Digit{1..3} </programlisting>
        
        <para>Hexadecimal or binary digits may be separated into groups of four using 
        an underscore.</para>

        <programlisting>HexDigits: HexDigit+ | HexDigit{1..4} ("_" HexDigit{4})+</programlisting>
        <programlisting>BinDigits: BinDigit+ | BinDigit{1..4} ("_" Digit{4})+</programlisting>

        <para>A digit is a decimal, hexadecimal, or binary digit.</para>
        
        <programlisting>Digit: "0".."9"</programlisting>
        <programlisting>HexDigit: "0".."9" | "A".."F" | "a".."f"</programlisting>
        <programlisting>BinDigit: "0"|"1"</programlisting>
        
        <para>A floating point literal may include either an <emphasis>exponent</emphasis> 
        (for scientific notation) or a <emphasis>magnitude</emphasis> (an SI unit
        prefix). An integer literal may include a magnitude.</para>
        
        <programlisting>Exponent: ("E"|"e") ("+"|"-")? Digit+</programlisting>
        
        <programlisting>Magnitude: "k" | "M" | "G" | "T" | "P"</programlisting>
        <programlisting>FractionalMagnitude: "m" | "u" | "n" | "p" | "f"</programlisting>
        
        <para>The following examples are legal numeric literals:</para>
        
        <programlisting>69</programlisting>
        <programlisting>6.9</programlisting>
        <programlisting>0.999e-10</programlisting>
        <programlisting>1.0E2</programlisting>
        <programlisting>10000</programlisting>
        <programlisting>1_000_000</programlisting>
        <programlisting>12_345.678_9</programlisting>
        <programlisting>1.5k</programlisting>
        <programlisting>12M</programlisting>
        <programlisting>2.34p</programlisting>
        <programlisting>5u</programlisting>
        <programlisting>$1010_0101</programlisting>
        <programlisting>#D00D</programlisting>
        
        <para>The following are <emphasis>not</emphasis> valid numeric literals:</para>
        
        <programlisting>.33  //Error: floating point literals may not begin with a decimal point</programlisting>
        <programlisting>1.  //Error: floating point literals may not end with a decimal point</programlisting>
        <programlisting>99E+3  //Error: floating point literals with an exponent must contain a decimal point</programlisting>
        <programlisting>12_34  //Error: decimal digit groups must be of length three</programlisting>
        <programlisting>#FF.00  //Error: floating point numbers may not be expressed in hexadecimal notation</programlisting>
        
    </section>
    
    <section id="characterliterals">
        <title>Character literals</title>
        
        <para>A single character literal consists of a character, surrounded by single
        quotes.</para> 
        
        <programlisting>CharacterLiteral: "'" Character "'"</programlisting>
        
        <programlisting>Character: ~("'" | "\") | EscapeSequence</programlisting>
        
        <programlisting>EscapeSequence: "\" ("b" | "t" | "n" | "f" | "r" | "\" | "&quot;" | "'" | "`" | "{" CharacterCode "}")</programlisting>
        
        <para>A Unicode codepoint escape is a four-digit or eight-digit hexadecimal literal 
        surrounded by braces.</para>
        
        <programlisting>CharacterCode: "#" HexDigit{4} | HexDigit{8}</programlisting>
                
        <para>The following are legal character literals:</para>
        
        <programlisting>'A'</programlisting>
        <programlisting>'#'</programlisting>
        <programlisting>' '</programlisting>
        <programlisting>'\n'</programlisting>
        <programlisting>'\{#212B}'</programlisting>
        
        <comment><para>TODO: should we support an escape sequence for Unicode character names
        <literal>\{LATIN SMALL LETTER A}</literal> like Python does?</para></comment>
        
    </section>
    
    <section id="stringliterals">
        <title>String literals</title>
        
        <para>A character string literal is a character sequence surrounded by double 
        quotes.</para>
        
        <programlisting>StringLiteral: "&quot;" StringCharacter* "&quot;"</programlisting>
        
        <programlisting>StringCharacter: ~( "\" | "&quot;" | "`" ) | "`" ~"`" | EscapeSequence</programlisting>
        
        <para>A sequence of two backticks is used to delimit an interpolated expression
        embedded in a string template.</para>
        
        <programlisting>StringStart: "&quot;" StringCharacter* "``"</programlisting>
        <programlisting>StringMid: "``" StringCharacter* "``"</programlisting>
        <programlisting>StringEnd: "``" StringCharacter* "&quot;"</programlisting>
        
        <para>A <emphasis>verbatim string</emphasis> is a character sequence delimited
        by a sequence of three double quotes. Verbatim strings do not contain escape
        sequences or interpolated expressions, so every character occurring inside the
        verbatim string is interpreted literally.</para>
        
        <programlisting>VerbatimStringLiteral: "&quot;&quot;&quot;" VerbatimCharacter* "&quot;&quot;&quot;"</programlisting>
        
        <programlisting>VerbatimCharacter: ~"&quot;" | "&quot;" ~"&quot;" | "&quot;" "&quot;" ~"&quot;"</programlisting>
        
        <para>The following are legal strings:</para>
        
        <programlisting>"Hello!"</programlisting>
        <programlisting>"\{00E5}ngstr\{00F6}ms"</programlisting>
        <programlisting>" \t\n\f\r,;:"</programlisting>
        <programlisting>"""This program prints "hello world" to the console."""</programlisting>
        
        <comment><para>TODO: specify how initial whitespace is stripped from multiline
        string literals.</para></comment>
        
    </section>
    
    </section>
    
    <section id="operatorsanddelimiters">
        <title>Operators and delimiters</title>
        
        <para>The following character sequences are operators and/or punctuation:</para>
        
        <para><literal>
        , ; ...
        { } ( ) [ ]
        ?
        . ?. *. 
        = =>
        + - * / % ^ **
        ++ --
        .. : ->
        ! &amp;&amp; ||
        ~ &amp; |
        === == != &lt; &gt; &lt;= &gt;= &lt;=&gt;
        += -= /= *= %= |= &amp;= ^= ~= ||= &amp;&amp;=
        ::
        </literal></para>
        
        <para>Certain symbols serve dual or multiple purposes in the grammar.</para>
        
    </section>

    <section id="sourcedirectories">
        <title>Source layout</title>
        
        <para>A <emphasis>source directory</emphasis> contains Ceylon source 
        code in files with the extension <literal>.ceylon</literal> and Java 
        source code in files with the extension <literal>.java</literal>. 
        The module and package to which a compilation unit belongs is 
        determined by the subdirectory in which the source file is found.</para>
        
        <para>The name of the package to which a compilation unit belongs is 
        formed by replacing every path directory separator character with a 
        period in the relative path from the source directory to the 
        subdirectory containing the source file. In the case of a Java source 
        file, the subdirectory must agree with the package specified by the 
        Java <literal>package</literal> declaration.</para>
        
        <para>The name of the module to which a compilation unit belongs is 
        determined by searching all containing directories for a module 
        descriptor. The name of the module is formed by replacing every path
        directory separator character with a period in the relative path 
        from the source directory to the subdirectory containing the module 
        descriptor.</para>
        
        <para>Thus, the structure of the source directory containing the 
        module <literal>org.hello</literal> might be the following:</para>
        
        <programlisting><![CDATA[source/
    org/
        hello/
            module.ceylon      //the module descriptor
            main/
                hello.ceylon
            default/
                DefaultHello.ceylon
            personalized/
                PersonalizedHello.ceylon]]></programlisting>
                
        <para>The source code for multiple modules may be contained in a
        single source directory.</para>
                
        <comment><para>Note: the tools and IDE support compilation and 
        execution of source not contained in a well-defined module. This 
        "default" module is not specified here, and is intended only as
        a convenience for experimental code.</para></comment>
        
    </section>
    
</chapter>